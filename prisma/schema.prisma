generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
   url     = env("DATABASE_URL")
 directUrl = env("DIRECT_URL")
}

enum mstatus{
  read
  delievered
  sent
}
enum tstatus{
  pending
  approved
  rejected
}

model User{
  id String  @unique @id  @default(uuid()) 
  username String  @db.VarChar(255)
  email String  @unique  @db.VarChar(255)
  password String  @db.VarChar(255)
  tokenbalance Int
  images Image[]
  // chat Chat[]
  token_request Token_Request?
  messages Messages[]
}

model Model{
  id String @id @unique @default(uuid())
  name String @unique @db.VarChar(255)
  attributes Json
  parameters Json
  description String @db.VarChar(255)
  profile_images Json
  // chat Chat[]
  messages Messages[]
}

model Image{
  id Int @id @default(autoincrement())
  url String  @db.VarChar(255)
  author User @relation(references: [id],fields: [authorId]) //can change it to user and model separately 
  authorId String
  image_tags Image_Tags[]
}

model Image_Tags{
  id Int @id @default(autoincrement())
  tag String @db.VarChar(255)
  image Image @relation(references: [id],fields: [image_id])
  image_id Int
}

model Admin{
  id Int @id @default(autoincrement())
  username String  @db.VarChar(255)
  email String    @db.VarChar(255)
  password String @db.VarChar(255)

}

// model Chat{
//   id Int @id @default(autoincrement())
//   user User @relation(references: [id],fields: [userId])
//   userId Int 
//   model Model @relation(references: [id],fields: [modelId])
//   modelId Int
//   messages Messages?
// }

model Messages{
  id Int @id @default(autoincrement())
  // chat Chat @relation(references: [id],fields: [chatId])
  user User? @relation(fields: [userId], references: [id])
  userId  String ? 
  model  Model? @relation(fields: [modelId], references: [id])
  modelId   String? 
  // chatId Int @unique
  message_text Json
  timestamp DateTime @default(now()) @db.Timestamp(0)
  status mstatus
 }

model Token_Request{
  id Int @id @default(autoincrement())
  user User @relation(references: [id],fields: [userId])
  userId String @unique
  requested_tokens Int
  status tstatus
}